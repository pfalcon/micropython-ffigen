#!/usr/bin/env python3
import sys
import json


FFI_TYPE_MAP = {
    ":void": "v",
    ":int": "i",
    ":unsigned-char": "B",
    ":short": "h",
    ":unsigned-int": "I",
    "uint8_t": "B",
    "uint16_t": "H",
    "uint32_t": "I",
    "ssize_t": "l",
}

SSTRUCT_TYPE_MAP = {
    ":void": "sstruct.VOID",
    ":unsigned-char": "sstruct.UINT8",
    ":short": "sstruct.INT16",
    ":int": "sstruct.INT32",
    ":unsigned-int": "sstruct.UINT32",
    ":enum": "sstruct.INT32",
    "uint8_t": "sstruct.UINT8",
    "uint16_t": "sstruct.UINT16",
}

def conv_ffi_type(rec):
    if rec["tag"] == ":pointer":
        return "p"
    if rec["tag"] in FFI_TYPE_MAP:
        return FFI_TYPE_MAP[rec["tag"]]
    assert 0, rec["tag"]

def conv_sstruct_type(rec, offset):
    if rec["tag"] in SSTRUCT_TYPE_MAP:
        v = SSTRUCT_TYPE_MAP[rec["tag"]]
        if "%d" in v:
            return v % offset
        else:
            return "%s | %d" % (v, offset)
    if rec["tag"] == ":pointer":
        if rec["type"]["tag"] == ":struct":
            return "(sstruct.PTR | %d, %s)" % (offset, rec["type"]["name"])
        else:
            if rec["type"]["tag"] not in SSTRUCT_TYPE_MAP:
                assert 0, rec
            return "(sstruct.PTR | %d, %s)" % (offset, SSTRUCT_TYPE_MAP[rec["type"]["tag"]])
    assert 0, rec["tag"]


f = open(sys.argv[1])
data = json.load(f)

print("import ffi")
print("import sstruct")
print()
print('l = ffi.open("libusb-1.0.so.0")')
print()


for desc in data:
    if not desc["location"].startswith("libusb.h:"):
        continue
    if desc["tag"] == "function":
        params = [conv_ffi_type(x["type"]) for x in desc["parameters"]]
        s = '%s = l.func(%r, "%s", %r)' % (desc["name"], conv_ffi_type(desc["return-type"]), desc["name"], "".join(params))
        if desc.get("inline", False):
            print("#%s" % s)
        else:
            print(s)
    elif desc["tag"] == "enum":
        print("# %s" % desc["name"])
        for f in desc["fields"]:
            print("%s = %s" % (f["name"], f["value"]))
    elif desc["tag"] == "struct":
        print("%s = {" % desc["name"])
        for f in desc["fields"]:
            print('    "%s": %s,' % (f["name"], conv_sstruct_type(f["type"], f["bit-offset"] / 8)))
#            print(f)
        if desc["bit-size"] != 0:
            # This doesn't have to be true due to alignment
            #assert desc["bit-size"] == f["bit-offset"] + f["bit-size"]
            pass
#        print(desc)
        print("}")
    elif desc["tag"] == "typedef":
        if desc["type"]["tag"] == ":struct":
            FFI_TYPE_MAP[desc["name"]] = desc["type"]["name"]
            SSTRUCT_TYPE_MAP[desc["name"]] = desc["type"]["name"]
            print("# typedef %s" % desc["name"])
        elif desc["type"]["tag"] == ":function-pointer":
            FFI_TYPE_MAP[desc["name"]] = "C"
            SSTRUCT_TYPE_MAP[desc["name"]] = "(sstruct.PTR | %d, sstruct.VOID)"
            print("# typedef func-ptr %s" % desc["name"])
        else:
            print(desc)
            assert 0, desc["tag"]
    else:
        print(desc)
        assert 0, desc["tag"]
        pass
